buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'se.transmode.gradle:gradle-docker:1.2'
        classpath 'org._10ne.gradle:rest-gradle-plugin:0.4.1'
    }
}

apply plugin: 'docker'
apply plugin: 'org.tenne.rest'


group = "jfrog"

def env = System.getenv()
def imageVersion = "3.0_${env['BUILD_NUMBER']}"
def dockerImage = "jfrog/redis-demo:${imageVersion}"

docker {
    useApi = false
    dockerBinary "/usr/local/bin/docker"
    baseImage "bintraydemo-docker-dockerv2-local.artifactoryonline.com/jfrog/ubuntu:latest"
    maintainer 'Dror Bereznitsky "drorb@jfrog.com"'
}

task redisDocker(type: Docker) {
    doFirst {
        println "Building '$dockerImage' and pushing to bintraydemo-docker-dockerv2-local.artifactoryonline.com ... "
    }

    applicationName = "redis-demo"
    tagVersion = "3.0_${env['BUILD_NUMBER']}"
    tag = "bintraydemo-docker-dockerv2-local.artifactoryonline.com/jfrog/redis-demo"
    push true
    runCommand """\\
      cd /tmp && \\
      wget http://download.redis.io/redis-stable.tar.gz && \\
      tar xvzf redis-stable.tar.gz && \\
      cd redis-stable && \\
      make && \\
      make install && \\
      cp -f src/redis-sentinel /usr/local/bin && \\
      mkdir -p /etc/redis && \\
      cp -f *.conf /etc/redis && \\
      rm -rf /tmp/redis-stable* && \\
      sed -i 's/^\\(bind .*\\)\$/# \\1/' /etc/redis/redis.conf && \\
      sed -i 's/^\\(daemonize .*\\)\$/# \\1/' /etc/redis/redis.conf && \\
      sed -i 's/^\\(dir .*\\)\$/# \\1\\ndir \\/data/' /etc/redis/redis.conf && \\
      sed -i 's/^\\(logfile .*\\)\$/# \\1/' /etc/redis/redis.conf"""
    volume "/data"
    //Define working directory.
    workingDir "/data"

    //Define default command.
    defaultCommand(["redis-server", "/etc/redis/redis.conf"])

    //Expose ports.
    exposePort 6379

    doLast {
        println "Image pushed to https://bintraydemo.artifactoryonline.com/bintraydemo/webapp/#/artifacts/browse/tree/General/dockerv2-local/jfrog/redis-demo/${imageVersion}"
    }
}

task pushToBintray(type: org._10ne.gradle.rest.RestTask) {
    description 'Pushing Docker image from Artifactory to Bintray'

    doFirst {
        println "Pushing '${dockerImage}' to Bintray ..."
        println "\tBintray organization: jfrog-int"
        println "\tBintray repo: demoreg"
    }

    httpMethod = 'post'
    uri = 'https://bintraydemo.artifactoryonline.com/bintraydemo/api/bintray/docker/push/dockerv2-local'
    username = 'admin'
    password = System.properties['artifactoryPassword']
    requestBody = [
        "dockerImage": dockerImage,
        "bintraySubject": "jfrog-int",
        "bintrayRepo": "demoreg",
        "async": false
    ]
    requestContentType = groovyx.net.http.ContentType.JSON

    responseHandler = {
        println "Successfully pushed '${dockerImage}' to https://bintray.com/jfrog-int/demoreg/jfrog:redis-demo/${imageVersion}/"
    }


}

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}